<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="PythonScript" module="Products.PythonScripts.PythonScript"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string>from json import dumps\n
portal = context.getPortalObject()\n
\n
def getERP5WorkflowGraph(erp5_workflow):\n
  graph = dict(nodes=dict(), edges=[], preferences=dict())\n
  for state in erp5_workflow.contentValues(portal_type=\'State\'):\n
    graph[\'nodes\'][state.getId()] = dict(name=state.getTranslatedTitle())\n
    for transition in state.getDestinationValueList(portal_type=\'Transition\'):\n
      graph[\'edges\'].append(dict(source=state.getId(),\n
                                 destination=transition.getDestinationId(),\n
                                 data=dict(name=transition.getTranslatedTitle())))\n
  return graph\n
  \n
def getDCWorkflowGraph(dc_workflow):\n
  graph = dict(nodes=dict(), edges=[], preferences=dict())\n
  for state in dc_workflow.states.objectValues():\n
    graph[\'nodes\'][state.getId()] = dict(name=state.title_or_id())\n
    for transition in state.transitions:\n
      if transition in dc_workflow.transitions:\n
        transition = dc_workflow.transitions[transition]\n
        if transition.new_state_id:\n
          graph[\'edges\'].append(dict(source=state.getId(),\n
                                     destination=transition.new_state_id,\n
                                     data=dict(name=transition.actbox_name or transition.title_or_id(),\n
                                               description=transition.description,\n
                                               actbox_url=transition.actbox_url,\n
                                               )))\n
  return graph\n
  \n
def getWorkflowHistoryGraph(document, workflow_id):\n
  portal_workflow = context.getPortalObject().portal_workflow\n
  graph = getDCWorkflowGraph(portal_workflow[workflow_id])\n
  history = portal_workflow.getInfoFor(document, \'history\', wf_id=workflow_id)\n
  state = portal_workflow.getInfoFor(document, portal_workflow[workflow_id].variables.getStateVar(), wf_id=workflow_id)\n
  graph[\'preferences\'].setdefault(state, {})[\'background-color\'] = \'#50AA50\' # XXX use a different style for the current state \n
\n
  return graph\n
  \n
visited_business_process_set = set() # prevent infinite recurisions\n
def getBusinessProcessGraph(business_process):\n
  graph = dict(nodes=dict(), edges=[], preferences=dict())\n
  if business_process in visited_business_process_set:\n
    return graph\n
  visited_business_process_set.add(business_process)\n
  for link in business_process.contentValues(portal_type=\'Business Link\'):\n
    for trade_state in (link.getPredecessorValue(), link.getSuccessorValue()):\n
      if trade_state is not None:\n
        graph[\'nodes\'][trade_state.getReference() or trade_state.getId()] = dict(name=trade_state.getTranslatedTitle())\n
    if link.getPredecessor() and link.getSuccessor():\n
      graph[\'edges\'].append(dict(source=link.getPredecessorReference() or link.getPredecessorId(),\n
                                 destination=link.getSuccessorReference() or link.getSuccessorId(),\n
                                 data=dict(name=link.getTranslatedTitle())))\n
  for specialise in business_process.getSpecialiseValueList(portal_type=\'Business Process\'):\n
    specialise_graph = getBusinessProcessGraph(specialise)\n
    for node_id, node_data in specialise_graph[\'nodes\'].items():\n
      graph[\'nodes\'].setdefault(node_id, node_data)\n
    for node_id, pref in specialise_graph[\'preferences\'].items():\n
      graph[\'preferences\'].setdefault(node_id, pref)\n
    graph[\'edges\'].extend(specialise_graph[\'edges\'])\n
      \n
  return graph\n
\n
\n
\n
if context.meta_type == \'ERP5 Workflow\':\n
  graph = getERP5WorkflowGraph(context)\n
elif context.meta_type == \'Workflow\':\n
  graph = getDCWorkflowGraph(context)\n
elif context.meta_type == \'ERP5 Business Process\':\n
  graph = getBusinessProcessGraph(context)\n
else:\n
  # workflow history for the first workflow.\n
  wf_id = None\n
  graph = dict(nodes=dict(), edges=[], preferences=dict())\n
  for wf in portal.portal_workflow.getWorkflowsFor(context):\n
    if wf.variables.getStateVar() in (\'validation_state\', \'simulation_state\'):\n
      wf_id = wf.getId()\n
      graph = getWorkflowHistoryGraph(context, wf_id)\n
      break\n
\n
# layout\n
for node_id, node_position in portal.ERP5Site_getGraphLayout(graph).items():\n
  graph[\'preferences\'].setdefault(node_id, {}).update(node_position)\n
\n
container.REQUEST.RESPONSE.setHeader(\'content-type\', \'application/json\')\n
return dumps(graph)\n
</string> </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>Base_getJsonGraph</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
